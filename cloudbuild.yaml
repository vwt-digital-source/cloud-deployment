---
timeout: 3600s
steps:
  # Create python3 virtualenv
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-virtualenv'
    waitFor: ['-']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install virtualenv==16.7.9
        virtualenv -p python3 /workspace/build-venv
        source /workspace/build-venv/bin/activate
        pip install -r ./scripts/requirements.txt

  # Create projects using Deployment Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-projects'
    waitFor: ['-']
    dir: 'scripts'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ./create_projects.sh ${PROJECT_ID}

  # Create logsinks using Deployment Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-logsinks'
    waitFor: ['-']
    dir: 'scripts'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ./create_logsinks.sh ${PROJECT_ID} \
          $(cat ../config/parent_folder_id.cfg) \
          $(cat ../config/billing_account_name.cfg) \
          ../config/logsinks.json

  # Update IAM based on projects.json
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'manage-service-accounts'
    waitFor:
      - create-virtualenv
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/build-venv/bin/activate
        python3 scripts/remove_service_accounts.py -p config/projects.json -s config/service_accounts.json

  # Enable/disable services based on projects.json
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'manage-services'
    waitFor:
      - create-projects
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        _parent=$(cat config/parent_folder_id.cfg)
        ./scripts/manage_services.sh config/projects.json config/services.json $${_parent}

  # Create default cloud build buckets in Europe
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-cloudbuild-buckets'
    waitFor:
      - create-projects
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ./scripts/create_cloudbuild_buckets.sh config/projects.json eu

  # Set cloud audit logs
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'set-audit-logs'
    waitFor:
      - create-projects
      - create-virtualenv
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        _projects=$(python3 ./scripts/list_projects.py ./config/projects.json)
        _audit_logs=$(cat ./config/audit_logs.cfg)
        source /workspace/build-venv/bin/activate
        python3 ./scripts/set_iam_policy.py -p "$${_projects}" -s "$${_audit_logs}" -c "auditConfigs"

  # Schedule revoke service account keys
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'schedule-revoke-sa-keys'
    waitFor:
      - create-projects
    dir: 'scripts'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source ../config/revoke_sa_keys.cfg
        _parent=$(cat ../config/parent_folder_id.cfg)
        ./schedule_revoke_sa_keys.sh "${PROJECT_ID}" "${_DCAT_DEPLOY_BRANCH_NAME}" "$${_parent}" "$${_EXPIRATION_PERIOD_DAYS}"

  # Deploy data catalog of cloud-deployment project
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'dcat-deploy'
    waitFor: ['-']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        git clone --branch=${_DCAT_DEPLOY_BRANCH_NAME} https://github.com/vwt-digital/dcat-deploy.git
        dcat-deploy/deploy_dcat_gcp.sh config/data_catalog.json ${PROJECT_ID} ${_DCAT_DEPLOY_BRANCH_NAME} $(base64 -w0 config/github_access_token.enc)

  # Create default app engines
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-app-engines'
    waitFor:
      - create-projects
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        python3 scripts/create_appengines.py config/projects.json | tee create_appengines.sh
        (source create_appengines.sh || exit 0)

  # Create Error Reporting and app traffic log sink for parent folder
  - name: 'gcr.io/cloud-builders/gcloud'
    waitFor:
      - create-projects
      - dcat-deploy
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source config/setup_logging_sink.config.sh
        if [ -n "$${_ERROR_PUBSUB_TOPIC}" ]
        then
           gcloud logging sinks describe vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-logging-sink-error \
              --folder=$(cat config/parent_folder_id.cfg) || \
              gcloud logging sinks create vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-logging-sink-error \
              $${_ERROR_PUBSUB_TOPIC} --log-filter='severity=ERROR' --include-children --folder=$(cat config/parent_folder_id.cfg)
        fi
        if [ -n "$${_APPTRAFFICLOG_PUBSUB_TOPIC}" ]
        then
           gcloud logging sinks describe vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-apptrafficlog-sink \
              --folder=$(cat config/parent_folder_id.cfg) || \
              gcloud logging sinks create vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-apptrafficlog-sink \
              $${_APPTRAFFICLOG_PUBSUB_TOPIC} --log-filter='resource.type=(api OR cloud_function OR cloud_run_revision OR consumed_api OR gae_app OR gce_instance OR http_load_balancer OR managed_service)' \
              --include-children --folder=$(cat config/parent_folder_id.cfg)
        fi

  # Deploy publish_build_result function to every project
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Publish build result function'
    dir: 'functions/publish_build_result_func'
    waitFor:
      - create-projects
      - dcat-deploy
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source ../../config/cloud_build_result_funcs.config.sh
        for pr in $(python3 ../../scripts/list_projects.py ../../config/projects.json)
        do
            gcloud functions deploy publish_build_result_func \
            --runtime=python37 \
            --entry-point=publish_build_result_func \
            --trigger-topic=cloud-builds \
            --region=europe-west1 \
            --project=$${pr} \
            --set-env-vars=TOPIC_PROJECT_ID=$${_TOPIC_PROJECT_ID},TOPIC_NAME=$${_TOPIC_NAME} &
        done
        wait

  # Set IAM permissions on G Suite group for ODH Hub
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'set-gsuite-iam-permssions'
    waitFor:
      - create-projects
      - create-virtualenv
      - dcat-deploy
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/build-venv/bin/activate
        export ADMINSDK_CREDENTIALS_ENCRYPTED=$(base64 -w0 config/adminsdk_credentials.enc)
        export PROJECT_ID=${PROJECT_ID}
        cp config/create_gsuite_group_iam.config.py scripts/config.py
        python3 scripts/create_gsuite_group_iam.py config/projects.json
        rm scripts/config.py

  # Create cloud build triggers on source repo commit
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-cloudbuild-triggers'
    waitFor:
      - create-projects
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ./scripts/create_cloudbuild_triggers.sh ./config/projects.json

  # Deploy report_build_status to GitHub function
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'remove report-build-status-to-github-func'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ! gcloud functions describe report_build_status_github_func --region=europe-west1 || gcloud functions delete report_build_status_github_func --region=europe-west1 --quiet
