timeout: 1800s
steps:
# Create the projects using Deployment Manager
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    ./create_projects.sh ${PROJECT_ID}
  dir: 'scripts'

# Decrypt the file containing the GitHub key
- name: 'gcr.io/cloud-builders/gcloud'
  args:
  - kms
  - decrypt
  - --ciphertext-file=config/github_access_token.enc
  - --plaintext-file=config/github_access_token.key
  - --location=europe-west1
  - --keyring=github
  - --key=github-access-token

# Create github repos based on data catalog
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    ./create_repo.sh data_catalog.json config/github_access_token.key
  dir: 'scripts'

# Deploy data catalog of cloud-deployment project
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    git clone --branch=${_DCAT_DEPLOY_BRANCH_NAME} https://github.com/vwt-digital/dcat-deploy.git
    dcat-deploy/deploy_dcat_gcp.sh config/data_catalog.json ${PROJECT_ID} ${_DCAT_DEPLOY_BRANCH_NAME} $(base64 -w0 config/github_access_token.enc)

# Deploy publish_build_result function to every project
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source ../../config/publish_build_result_func.config.sh
    for pr in $(python3 ../../scripts/listprojects.py ../../config/projects.json)
    do
        gcloud functions deploy publish_build_result_func \
        --runtime=python37 \
        --entry-point=publish_build_result_func \
        --trigger-topic=cloud-builds \
        --region=$${_DEPLOYMENT_REGION} \
        --project=$${pr} \
        --set-env-vars=PUBLISH_PROJECT_ID=$${_PUBLISH_PROJECT_ID},PUBLISH_TOPIC_NAME=$${_PUBLISH_TOPIC_NAME} &
    done
    wait
  dir: 'functions/publish_build_result_func'

# Set IAM permissions on common cloud build result topic to allow all projects to publish their build results
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    python3 scripts/create_cloudbuilds_topic_iam.py config/projects.json | tee cloudbuildtopiciam.json
    gcloud beta pubsub topics set-iam-policy ${PROJECT_ID}-cloud-builds cloudbuildtopiciam.json -q
    python3 scripts/create_appengines.py config/projects.json | tee create_appengines.sh
    (source create_appengines.sh || exit 0)

# Copy build status badges to storage bucket
- name: 'gcr.io/cloud-builders/gsutil'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source ../../config/create_build_badge_func.config.sh
    gsutil cp badge-*.png gs://$${_STORAGE_BUCKET}
  dir: 'functions/create_build_badge_func'

# Deploy create_build_badges function
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source ../../config/create_build_badge_func.config.sh
    gcloud functions deploy create_build_badge_func \
    --runtime=python37 \
    --trigger-topic=$${_TOPIC_NAME} \
    --region=$${_DEPLOYMENT_REGION} \
    --set-env-vars=STORAGE_BUCKET=$${_STORAGE_BUCKET}
  dir: 'functions/create_build_badge_func'

# Deploy report_build_status to GitHub function
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source ../../config/create_build_badge_func.config.sh
    _GITHUB_ACCESS_TOKEN_ENCRYPTED=$(base64 -w0 ../../config/github_access_token.enc)
    gcloud functions deploy report_build_status_github_func \
    --runtime=python37 \
    --trigger-topic=$${_TOPIC_NAME} \
    --region=$${_DEPLOYMENT_REGION} \
    --set-env-vars=STORAGE_BUCKET=$${_STORAGE_BUCKET},GITHUB_ACCESS_TOKEN_ENCRYPTED=$${_GITHUB_ACCESS_TOKEN_ENCRYPTED},PROJECT_ID=${PROJECT_ID}
  dir: 'functions/report_build_status_github_func'

# Create cloud build triggers on source repo commit
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcp_access_token=$(gcloud config config-helper --format='value(credential.access_token)')
    for project_id in $(python3 scripts/listprojects.py config/projects.json)
    do
        curl -X GET -H "Authorization: Bearer ${gcp_access_token}" "https://cloudbuild.googleapis.com/v1/projects/${project_id}/triggers" > project_triggers.json
        python3 scripts/listprojecttriggers.py config/projects.json ${project_id} |
        while read -r trigger
        do
            echo "Creating trigger in ${project_id}..."
            echo ${trigger} | tee trigger.json
            existing_id=$(python3 scripts/checktriggerexists.py project_triggers.json trigger.json)

            if [ -n "${existing_id}" ]
            then
                curl -X DELETE -H "Authorization: Bearer ${gcp_access_token}" "https://cloudbuild.googleapis.com/v1/projects/${project_id}/triggers/${existing_id}"
            fi

            curl -X POST -T trigger.json -H "Authorization: Bearer ${gcp_access_token}" "https://cloudbuild.googleapis.com/v1/projects/${project_id}/triggers"
        done
    done

substitutions:
    _DCAT_DEPLOY_BRANCH_NAME: master
