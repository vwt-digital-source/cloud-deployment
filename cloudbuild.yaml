timeout: 3600s

steps:
# Create the projects using Deployment Manager
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'create-projects'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    ./create_projects.sh ${PROJECT_ID}
  dir: 'scripts'

# Remove service accounts not specified in the projects.json
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'remove not specified service accounts'
  waitFor:
  - create-projects
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    pip install virtualenv
    virtualenv -p python3 venv
    source venv/bin/activate
    pip install --upgrade google-cloud google-auth google-api-python-client oauth2client
    python3 scripts/remove_service_accounts.py config/projects.json 

# Deploy data catalog of cloud-deployment project
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'dcat-deploy'
  waitFor: ['-']  # The '-' indicates that this step begins immediately.
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    git clone --branch=${_DCAT_DEPLOY_BRANCH_NAME} https://github.com/vwt-digital/dcat-deploy.git
    dcat-deploy/deploy_dcat_gcp.sh config/data_catalog.json ${PROJECT_ID} ${_DCAT_DEPLOY_BRANCH_NAME} $(base64 -w0 config/github_access_token.enc)

# Create app engines
- name: 'gcr.io/cloud-builders/gcloud'
  waitFor:
  - create-projects
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    python3 scripts/create_appengines.py config/projects.json | tee create_appengines.sh
    (source create_appengines.sh || exit 0)

# Setup github teams on repositories
- name: 'python:3.7'
  id: 'github-teams-repo-permissions'
  waitFor:
  - dcat-deploy
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    pip3 install requests google-cloud-kms
    export GITHUB_ACCESS_TOKEN_ENCRYPTED=$(base64 -w0 config/github_access_token.enc)
    export PROJECT_ID=${PROJECT_ID}
    python3 dcat-deploy/catalog/repos/setup_github_team_repos.py config/data_catalog.json

# Deploy report_build_status to GitHub function
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'report-build-status-to-github-func'
  waitFor:
  - dcat-deploy
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source ../../config/cloud_build_result_funcs.config.sh
    _GITHUB_ACCESS_TOKEN_ENCRYPTED=$(base64 -w0 ../../config/github_access_token.enc)
    gcloud functions deploy report-build-status-github-func \
    --entry-point=topic_to_github \
    --runtime=python37 \
    --trigger-http \
    --project=${PROJECT_ID} \
    --region=europe-west1 \
    --max-instances=10 \
    --set-env-vars=PUBSUB_VERIFICATION_TOKEN=12345qwer,DOMAIN_VALIDATION_TOKEN=$${_DOMAIN_VALIDATION_TOKEN},GITHUB_ACCESS_TOKEN_ENCRYPTED=$${_GITHUB_ACCESS_TOKEN_ENCRYPTED},PROJECT_ID=${PROJECT_ID}
  dir: 'functions/report_build_status_github_func'

# Protect http report_build_status to GitHub function
- name: 'gcr.io/cloud-builders/gcloud'
  waitFor:
  - report-build-status-to-github-func
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if [[ "${_DCAT_DEPLOY_BRANCH_NAME}" == "develop" ]]; then echo '{ "bindings": [ { "members": [ "serviceAccount:vwt-d-gew1-odh-hub@appspot.gserviceaccount.com" ], "role": "roles/cloudfunctions.invoker" } ] }' > consume_func_permissions.json; fi
    if [[ "${_DCAT_DEPLOY_BRANCH_NAME}" == "master" ]]; then echo '{ "bindings": [ { "members": [ "serviceAccount:vwt-p-gew1-odh-hub@appspot.gserviceaccount.com" ], "role": "roles/cloudfunctions.invoker" } ] }' > consume_func_permissions.json; fi
    gcloud beta functions set-iam-policy report-build-status-github-func --region=europe-west1 --project=${PROJECT_ID} consume_func_permissions.json

# Create Error Reporting and app traffic log sink for parent folder
- name: 'gcr.io/cloud-builders/gcloud'
  waitFor:
  - create-projects
  - dcat-deploy
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source config/setup_logging_sink.config.sh
    if [ -n "$${_ERROR_PUBSUB_TOPIC}" ]
    then
       gcloud logging sinks describe vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-logging-sink-error \
          --folder=$(cat config/parent_folder_id.cfg) || \
          gcloud logging sinks create vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-logging-sink-error \
          $${_ERROR_PUBSUB_TOPIC} --log-filter='severity=ERROR' --include-children --folder=$(cat config/parent_folder_id.cfg)
    fi
    if [ -n "$${_APPTRAFFICLOG_PUBSUB_TOPIC}" ]
    then
       gcloud logging sinks describe vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-apptrafficlog-sink \
          --folder=$(cat config/parent_folder_id.cfg) || \
          gcloud logging sinks create vwt-${_DCAT_DEPLOY_BRANCH_NAME}-$(cat config/parent_folder_id.cfg)-apptrafficlog-sink \
          $${_APPTRAFFICLOG_PUBSUB_TOPIC} --log-filter='resource.type=(api OR cloud_function OR cloud_run_revision OR consumed_api OR gae_app OR gce_instance OR http_load_balancer OR managed_service)' \
          --include-children --folder=$(cat config/parent_folder_id.cfg)
    fi

# Deploy publish_build_result function to every project
- name: 'gcr.io/cloud-builders/gcloud'
  waitFor:
  - create-projects
  - dcat-deploy
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source ../../config/cloud_build_result_funcs.config.sh
    for pr in $(python3 ../../scripts/listprojects.py ../../config/projects.json)
    do
        gcloud functions deploy publish_build_result_func \
        --runtime=python37 \
        --entry-point=publish_build_result_func \
        --trigger-topic=cloud-builds \
        --region=europe-west1 \
        --project=$${pr} \
        --set-env-vars=TOPIC_PROJECT_ID=$${_TOPIC_PROJECT_ID},TOPIC_NAME=$${_TOPIC_NAME} &
    done
    wait
  dir: 'functions/publish_build_result_func'

# Set IAM permissions on G Suite group for ODH Hub
- name: 'gcr.io/cloud-builders/gcloud'
  waitFor:
  - create-projects
  - dcat-deploy
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    pip install virtualenv
    virtualenv -p python3 venv
    source venv/bin/activate
    source config/create_cloudbuilds_group_iam.config.sh
    pip install --upgrade google-cloud google-cloud-kms google-auth google-api-python-client
    export ADMINSDK_CREDENTIALS_ENCRYPTED=$(base64 -w0 config/adminsdk_credentials.enc)
    export PROJECT_ID=${PROJECT_ID}
    python3 scripts/create_cloudbuilds_group_iam.py config/projects.json $${_USER_IMPERSONATION_EMAIL} $${_SERVICE_ACCOUNT_SCOPE} $${_GSUITE_GROUP_KEY}

# Create cloud build triggers on source repo commit
- name: 'gcr.io/cloud-builders/gcloud'
  waitFor:
  - github-teams-repo-permissions
  - create-projects
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcp_access_token=$(gcloud config config-helper --format='value(credential.access_token)')
    for project_id in $(python3 scripts/listprojects.py config/projects.json)
    do
        curl -X GET -H "Authorization: Bearer ${gcp_access_token}" "https://cloudbuild.googleapis.com/v1/projects/${project_id}/triggers" > project_triggers.json
        python3 scripts/listprojecttriggers.py config/projects.json ${project_id} |
        while read -r trigger
        do
            echo "Creating trigger in ${project_id}..."
            echo ${trigger} | tee trigger.json
            existing_id=$(python3 scripts/checktriggerexists.py project_triggers.json trigger.json)

            if [ -n "${existing_id}" ]
            then
                curl -X DELETE -H "Authorization: Bearer ${gcp_access_token}" "https://cloudbuild.googleapis.com/v1/projects/${project_id}/triggers/${existing_id}"
            fi

            curl -X POST -T trigger.json -H "Authorization: Bearer ${gcp_access_token}" "https://cloudbuild.googleapis.com/v1/projects/${project_id}/triggers"
        done
    done

substitutions:
    _DCAT_DEPLOY_BRANCH_NAME: master
